###################################################
|exerciseicon_ST| Exercici 32_48. El tres en ratlla
###################################################

.. rubric:: Context

* Carpeta de lliurament: ``32_48_tresenratlla/``

* Continguts relacionats: :doc:`arrays_taules`

* Com lliurar-lo: :ref:`instruccions <instruccions_git>`

* [☆] Exercici amb :ref:`dificultat addicional<descripcio_exercicis_dificils>`

* [✓] Exercici amb :ref:`autoavaluació<descripcio_exercicis_autoavaluacio>`

.. rubric:: Enunciat

En aquest exercici implementarem el joc del tres en ratlla de manera que
es pugui jugar.

El joc començarà amb el taulell en blanc i anirà demanant moviments
alternativament a cada jugador.

El joc finalitzarà quan passi una de les següents situacions:

* un jugador entra el valor ``"a"`` (no importen majúscules)
  en comptes d'una coordenada vàlida 

  El programa ho indicarà amb el missatge ``"X abandona"`` o ``"O
  abandona"`` .

* un jugador aconsegueix el tres en ratlla.

  El programa ho indicarà amb el missatge ``"X guanya"`` o ``"O guanya"``.

* totes les caselles estan ocupades (empat)

  El programa ho indicarà amb el missatge ``"Empat"``.

Sempre començarà el jugador **ㄨ**.

La manera d'indicar les coordenades del moviment serà amb la fila i la
columna seguides. Per exemple, la casella ``(0,0)`` s'indicarà amb
``"00"`` i la ``(1, 2)`` amb ``"12"``.

Quan es processa una coordenada, es consideraran els següents casos:

* ``"a"``: el jugador abandona.

  S'indica que el jugador abandona i es finalitza el joc.

* format incorrecte: l'entrada no està formada per dos dígits entre 0 i 2.

  Es mostra el missatge ``"Error"`` i es torna a demanar moviment al
  mateix jugador.

* casella ocupada: l'entrada correspon a una casella que ja ha estat
  marcada

  Es mostra el missatge ``"Ocupada"`` i es torna a demanar moviment al
  mateix jugador.

* casella lliure: l'entrada correspon a una casella buida.

  Es marca la casella i es mostra el resultat. Si el moviment no finalitza
  el joc, passa el torn a l'altre jugador.

Considera les següents simulacions:

.. code-block:: console
    :emphasize-lines: 2-6, 8-11, 13-17, 19-22, 24-27, 29-32, 34-

    $ java TresEnRatlla
    Comença el joc
    ···
    ···
    ···
    X?
    11
    ···
    ·X·
    ···
    O?
    11
    Ocupada
    ···
    ·X·
    ···
    O?
    01
    ·O·
    ·X·
    ···
    X?
    22
    ·O·
    ·X·
    ··X
    O?
    02
    ·OO
    ·X·
    ··X
    X?
    00
    XOO
    ·X·
    ··X
    X Guanya

Atenció ara al jugador `O` que s'equivocarà i abandonarà:

.. code-block:: console
    :emphasize-lines: 2-6, 8-11, 13-17, 19-

    $ java TresEnRatlla
    Comença el joc
    ···
    ···
    ···
    X?
    11
    ···
    ·X·
    ···
    O?
    23
    error
    ···
    ·X·
    ···
    O?
    a
    O abandona

A banda, el teu codi haurà d'incloure uns determinats mòduls (agafa-ho com
una pista):

* ``mostraTaulell(char[][])``: permet mostrar el contingut del taulell

* ``boolean casellaOcupada(char[][], int fila, int columna)``: retorna
  cert quan està ocupada la casella corresponent a la fila i columna

* ``boolean jugadorGuanya(char[][], char jugador)``: retorna cert quan el
  jugador ha fet un tres en ratlla al taulell. Espera que ``jugador``
  tingui com a valor ``'X'`` o ``'O'``.

* ``boolean hiHaEmpat(char[][])``: retorna cert quan ja no es poden fer
  més moviments.
  

Aquí tens una plantilla que et pot servir d'ajut, si creus que la
necessites:

.. code-block:: java
    :linenos:

    /* XXX comentari adequat */
    public class TresEnRatlla {

        // mòduls de suport
        /* XXX */

        public static void main(String[] args) {
            // declara i inicialitza el taulell
            /* XXX */

            System.out.println("Comença el joc");

            // indica quin és el jugador que té el torn
            /* XXX */

            while (/* XXX */) {
                mostraTaulell(taulell);

                // obté el moviment del jugador actual
                /* XXX */

                // comprova abandonament
                /* XXX */

                // obté coordenades del moviment
                /* XXX */

                // comprova si la casella està ocupada
                /* XXX */

                // realitza el moviment
                /* XXX */

                // comprova jugador guanya
                /* XXX */

                // comprova empat
                /* XXX */

                // passa torn a l'altre jugador
                /* XXX */
            }
        }
    }
