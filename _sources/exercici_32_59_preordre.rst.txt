#######################################################
|exerciseicon__T| Exercici 32_59. Subcadenes: pre-ordre
#######################################################

.. rubric:: Context

* Carpeta de lliurament: ``32_59_preordre/``

* Continguts relacionats: :doc:`moduls_recursivitat`

* Com lliurar-lo: :ref:`instruccions <instruccions_git>`

* [✓] Exercici amb :ref:`autoavaluació<descripcio_exercicis_autoavaluacio>`

.. rubric:: Enunciat

En aquesta ocasió, desenvoluparàs un programa que obtindrà un text per
entrada estàndard i mostrarà per sortida estàndard totes les subcadenes
possibles, tenint en comptes només les lletres.

Per mostrar l'ordre requerit per aquest exercici, caldrà que implementis
el següent algorisme recursiu:

* Si la cadena d'entrada té una longitud menor o igual a 1, es mostra la
  cadena sencera i s'acaba

* Si la cadena té una longitud més gran que 1, llavors:

    1. Primer es mostra la cadena

    2. Després es mostra les subcadenes corresponents a la primera meitat de la cadena

    3. Finalment es mostra les subcadenes corresponents a la resta de la cadena

Caldrà que la teva solució **no** faci servir cap estructura de bucle
iteratiu (``for`` ``while``)

Considera la següent simulació:

.. code-block:: console
    :emphasize-lines: 2,4-

    $ java Subcadenes
    Text?
    Recursivitat en Java!
      18: RecursivitatenJava
       9: Recursivi
       4: Recu
       2: Re
       1: R
       1: e
       2: cu
       1: c
       1: u
       5: rsivi
       2: rs
       1: r
       1: s
       3: ivi
       1: i
       2: vi
       1: v
       1: i
       9: tatenJava
       4: tate
       2: ta
       1: t
       1: a
       2: te
       1: t
       1: e
       5: nJava
       2: nJ
       1: n
       1: J
       3: ava
       1: a
       2: va
       1: v
       1: a


Per poder fer l'alineació dels números que et permetrà passar les proves,
considera el següent comanda:

.. code-block:: java

        System.out.printf("%4d: %s%n", text.length(), text);

Si ``text`` és ``"recursivitat"`` escriurà per pantalla:

.. code-block:: console

   ··12: recursivitat

Atenció: he fet servir el caràcter ``·`` per remarcar que hi ha espais.

Per donar-te la màxima llibertat a l'hora d'estructurar el teu programa,
les proves no inclouen cap requeriment modular. Has de tenir present,
però, que no podràs fer ús de mòduls previs que continguin bucles
iteratius (``for``, ``while``).

Només si et cal, continua llegint les pistes de com resoldre-ho:

1. la neteja dels caràcters que no siguin lletres, pot ser realitzada amb
   un mòdul nou que haurà de ser recursiu.

2. la divisió de subcadenes les hauràs de realitzar també en un mòdul
   recursiu.

Com que ambdós mòduls rebran un string, pots fer la recursivitat de manera
molt similar. Dues possibilitats:

1. el cas base és la cadena buida (o fins una mida fixa), i el cas
   recursiu fa servir ``String.substring()`` per escurçar l'argument.

2. els mòduls inclouen un o més paràmetres addicionals que indiquen des de
   quina (i fins quina) posició ha de considerar el text rebut. El cas
   base serà quan aquestes posicions corresponguin a un segment del text
   buit o de la mida fixa.

.. note:: A aquest ordre se li diu pre-ordre. Hi pots trobar més
   informació, per exemple `aquí <https://ca.wikipedia.org/wiki/Estructura_arb%C3%B2ria>`_
