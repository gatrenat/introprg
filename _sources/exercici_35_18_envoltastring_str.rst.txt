######################################################################
|exerciseicon__T| Exercici 35_18. EnvoltaString és compara amb Strings
######################################################################

.. rubric:: Context

* Carpeta de lliurament: ``35_18_envoltastring_str/``

* Continguts relacionats: :doc:`bib_maps`

* Com lliurar-lo: :ref:`instruccions <instruccions_git>`

* [✓] Exercici amb :ref:`autoavaluació<descripcio_exercicis_autoavaluacio>`

.. rubric:: Enunciat

Crea una nova versió de la classe ``EnvoltaString`` a partir de la versió
de l'exercici :doc:`anterior <exercici_35_17_envoltastring_case>` de
manera que ara també permeti comparar un ``EnvoltaString`` directament amb
un ``String``.

Considera aquest ``UsaEnvoltaString``:

.. code-block:: java
   :linenos:

    public class UsaEnvoltaString {
        public static void main(String[] args) {
            String nom1 = "Renat";
            String nom2 = args.length > 0 ? args[0] : "nom per defecte";
            System.out.printf("\"%s\".equals(\"%s\") -> %b%n", nom1, nom2, nom1.equals(nom2));

            EnvoltaString envoltaNom1 = new EnvoltaString(nom1);
            EnvoltaString envoltaNom2 = new EnvoltaString(nom2);
            System.out.printf("%s.equals(%s) -> %b%n", envoltaNom1, envoltaNom2, envoltaNom1.equals(envoltaNom2));
            System.out.printf("%s.equals(\"%s\") -> %b%n", envoltaNom1, nom2, envoltaNom1.equals(nom2));
            System.out.printf("\"%s\".equals(%s) -> %b%n", nom1, envoltaNom2, nom1.equals(envoltaNom2));
        }
    }

Que presentarà la sortida:

.. code-block:: console
   :emphasize-lines: 2-

    $ java UsaEnvoltaString RENAT
    "Renat".equals("RENAT") -> false
    ENVOLTAT("Renat").equals(ENVOLTAT("RENAT")) -> true
    ENVOLTAT("Renat").equals("RENAT") -> true
    "Renat".equals(ENVOLTAT("RENAT")) -> false

**Nota**: fixa't en la darrera comparació de ``UsaEnvoltaString``. Creus
que mai podrà ser ``true``? Perquè? Posa la teva resposta en els
comentaris del teu codi.
