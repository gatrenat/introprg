############################################################
|exerciseicon__T| Exercici 34_17. En Renat està ensinistrat!
############################################################

.. rubric:: Context

* Carpeta de lliurament: ``34_17_ensinistrat/``

* Continguts relacionats: :doc:`poo_intro_accions`

* Com lliurar-lo: :ref:`instruccions <instruccions_git>`

* [✓] Exercici amb :ref:`autoavaluació<descripcio_exercicis_autoavaluacio>`

.. rubric:: Enunciat

Torna a considerar els nous mètodes del gat Renat:

.. uml::
    :align: center

     @startuml
     hide circle
     skinparam monochrome true
     skinparam classAttributeIconSize 0

     class GatRenat {
         + aixecat(): String
         + seu(): String
         + estirat(): String
     }
     @enduml


Afegeix tres nous mètodes: ``String aixecat()``, ``String seu()``, i
``String estirat()`` de manera que quan vulguem, per exemple, que en Renat
s'aixequi simplement li diguem  ``renat.aixecat();``.

En cas que el Renat ja estigués en l'estat que se li demana, no fa cap canvi d'estat.

Aquestes funcions retornaran un missatge indicant el que ha fet el Renat.
Així, els missatges que ens retornarà seran:
``"ja m'estiro"``,
``"ja m'assec"``,
``"ja m'aixeco"``, i
``"passo de fer res"``.

**Atenció**: els nous mètodes **no** han d'escriure res per sortida estàndard!

Fes servir el ``main()`` a ``UsaGatRenat`` per demostrar el funcionament d'aquests nous
mètodes.

.. code-block:: java
    :linenos:

    public static void main(String[] args) {
        GatRenat renat = new GatRenat();
        System.out.println("El Renat diu: "+ renat.aixecat());
        System.out.println("El Renat diu: "+ renat.seu());
        System.out.println("El Renat diu: "+ renat.estirat());
        System.out.println("El Renat diu: "+ renat.estirat());
    }


La sortida haurà de ser:

.. code-block:: console
    :emphasize-lines: 2-

    $ java UsaGatRenat 
    El Renat diu: ja m'aixeco
    El Renat diu: ja m'assec
    El Renat diu: ja m'estiro
    El Renat diu: passo de fer res


