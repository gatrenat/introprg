#############################################################
|exerciseicon__T| Exercici 52_28. El misteriós literal ``30``
#############################################################

.. rubric:: Context

* Carpeta de lliurament: ``52_28_una_constant/``

* Continguts relacionats: :doc:`refactoring_altres`

* Com lliurar-lo: :ref:`instruccions <instruccions_git>`

* [✓] Exercici amb :ref:`autoavaluació<descripcio_exercicis_autoavaluacio>`

.. rubric:: Enunciat

Considerem ara el pas de refacció anomenat *extracció de constant*.

Si revises el codi resultant, trobaràs que apareix el literal ``30`` en el codi
de ``importTotal()`` i en el de ``composaDetall()``. Què vol dir aquest valor?
És el mateix significat en tots dos mètodes?

En aquest cas, ``30`` és el valor multiplicatiu per a aconseguir convertir
l'import a euros. Per exemple, llogar un vehicle bàsic per un dia suposa ``3``
unitats de *cost* mentre que llogar un vehicle general també per un dia ens
*costa* ``6``. Si volem saber l'import que correspon, hem de multiplicar per 30
aquestes quantitats tant per l'import de cada vehicle com del total. Diríem
doncs que ``30`` és el valor en euros d'una unitat de cost de lloguer.

Així, podem declarar la constant següent:

.. code-block:: java

    private static final double EUROS_PER_UNITAT_DE_COST = 30;

Ara, substituïm totes les aparicions de ``30`` per aquesta constant. Amb aquest
senzill canvi, el codi guanya en llegibilitat doncs és molt més fàcil entendre
què vol dir el ``30`` allà on s'aplica. Si en un futur hem de canviar la lògica
(ex. el preu per unitat de cost), ens resultarà molt més fàcil doncs només
haurem de tocar un lloc. Fins i tot, podríem arribar a passar la nova constant
a una propietat (o paràmetre) de manera que la poguéssim modificar sense
requerir recompilar!

Implementa aquest senzill canvi per passar totes les proves.

.. important:: Malgrat sembli un canvi senzill, cal executar les proves per si
   hem trencat alguna cosa.

