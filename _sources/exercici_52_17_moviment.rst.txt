##################################################################
|exerciseicon__T| Exercici 52_17. Movent ``quantitatPerLloguer()``
##################################################################

.. rubric:: Context

* Carpeta de lliurament: ``52_17_moviment/``

* Continguts relacionats: :doc:`refactoring_method_movement`

* Com lliurar-lo: :ref:`instruccions <instruccions_git>`

* [✓] Exercici amb :ref:`autoavaluació<descripcio_exercicis_autoavaluacio>`

.. rubric:: Enunciat

Com hem vist, el mètode ``quantitatPerLloguer()`` no té gaire sentit que
estigui a ``Client`` ja que no fa servir res d'aquesta classe. És lògic. Al cap
i a la fi, el que calcula és la quantitat respecte a un lloguer.

Per tant, *mourem* aquest mètode a la classe ``Lloguer``.

El moviment directe d'aquest mètode implicaria crear un mètode estàtic a la
classe ``Lloguer``, ja que el lloguer sobre el que es calcularia la quantitat
seria el que rebria per paràmetre.

No tindria sentit que un mètode de lloguer, hagués de rebre la instància de
lloguer com a paràmetre. Per això ja està el ``this``! Així que, no farem que
el mètode sigui estàtic.

Per altra banda, el nom ``quantitatPerLloguer`` ja no és adequat. És evident
que la quantitat a calcular serà per un lloguer quan la funció es troba
definida per una instància de lloguer. Eliminarem aquesta redundància
reanomenant-lo ``quantitat()``.

A més a més, com que el nou mètode ha de ser accedit des de la classe
``Client``, la seva visiblitat ja no pot ser ``private``.

Finalment, com que ``Client`` ha deixat de definir la funció, segurament li
caldrà algun petit canvi per usar la de ``Lloguer``.

Amb tot això en ment, mou el mètode ``Client.quantitatPerLloguer()`` a
``Lloguer.quantitat()``.

Com sempre, assegura't que els canvis no han trencat res (passa els
jocs de prova)
