#########################################
|exerciseicon__T| Exercici 33_08. Alumnes
#########################################

.. rubric:: Context

* Carpeta de lliurament: ``33_08_alumnes/``

* Continguts relacionats: :doc:`fitxers_registres`

* Com lliurar-lo: :ref:`instruccions <instruccions_git>`

* [✓] Exercici amb :ref:`autoavaluació<descripcio_exercicis_autoavaluacio>`

.. rubric:: Enunciat

En aquest exercici acabarem de completar algunes de les funcions
associades al tipus ``Alumne`` que hem definit als continguts.

Recordem la definició:

.. code-block:: java

    static class Alumne {
        String nom;
        String email;
        int edat;    
        boolean esOient;
        int[] notes;
    }

Per provar algunes d'elles, desenvoluparem un programa que llegirà les
dades del fitxer ``alumnes.csv`` i mostrarà la informació relativa a cada
alumne que correspongui al criteri de cerca que s'indiqui per l'argument
esperat.

La clau de cerca és un String que ha d'aparèixer com a part del nom o del
correu electrònic dels alumnes a mostrar. El programa no hauria de
distingir majúscules o minúscules.

Per exemple, considera el contingut del fitxer:

.. code-block:: console
   :emphasize-lines: 2-

    $ cat alumnes.csv
    nom,email,edat,esOient,uf1,uf2,uf3,uf4,uf5,uf6
    Eleftèria Ortiz Luján,elefteria.ortiz@mevaempresa.org,10,false,7,8,5,7,8,9
    Daniel Carrasco Macadàmia,daniel.carrasco@mevaempresa.org,21,true,5,4,5,2,NP,NP
    Gabriela Cirerer Nasal,gabriela.cirerer@mevaempresa.org,20,false,6,7,5,8,9,5

Les següents execucions demostren el funcionament del programa:

.. code-block:: console
   :emphasize-lines: 2-

    $ java CercaAlumnes elef
    Alumne: Eleftèria Ortiz Luján
    - email: elefteria.ortiz@mevaempresa.org
    - edat: 10
    - és oïent: No
    - notes: 7,8,5,7,8,9

.. code-block:: console
   :emphasize-lines: 2-

    $ java CercaAlumnes ria
    Alumne: Eleftèria Ortiz Luján
    - email: elefteria.ortiz@mevaempresa.org
    - edat: 10
    - és oïent: No
    - notes: 7,8,5,7,8,9
    Alumne: Daniel Carrasco Macadàmia
    - email: daniel.carrasco@mevaempresa.org
    - edat: 21
    - és oïent: Sí
    - notes: 5,4,5,2,NP,NP
    Alumne: Gabriela Cirerer Nasal
    - email: gabriela.cirerer@mevaempresa.org
    - edat: 20
    - és oïent: No
    - notes: 6,7,5,8,9,5

.. code-block:: console
   :emphasize-lines: 2-

    $ java CercaAlumnes as
    Alumne: Daniel Carrasco Macadàmia
    - email: daniel.carrasco@mevaempresa.org
    - edat: 21
    - és oïent: Sí
    - notes: 5,4,5,2,NP,NP
    Alumne: Gabriela Cirerer Nasal
    - email: gabriela.cirerer@mevaempresa.org
    - edat: 20
    - és oïent: No
    - notes: 6,7,5,8,9,5

.. code-block:: console
   :emphasize-lines: 2-

    $ javac CercaAlumnes.java && java CercaAlumnes elvira
    Cap alumne

.. code-block:: console
   :emphasize-lines: 2-

    $ java CercaAlumnes
    Error: indica el criteri de cerca

Consideracions addicionals i pistes
===================================

Podem suposar que el fitxer existeix, que conté al menys una línia amb les
capçaleres, i que totes les línies contenen valors suficients i adequats per
completar un alumne.

Considera la funció ``String.contains()`` per fer les comprovacions.

Potser et serveix la següent plantilla:

.. code-block:: java

    import java.io.IOException;
    import java.io.FileReader;
    import java.io.BufferedReader;
    public class CercaAlumnes {

        static class Alumne {
            String nom;
            String email;
            int edat;    
            boolean esOient;
            int[] notes;
        }

        public static Alumne construeixAlumne(String nom, String email,
                                              int edat, boolean esOient,
                                              int[] notes) {
            Alumne alumne = new Alumne();
            alumne.nom = nom;
            alumne.email = email;
            alumne.edat = edat;
            alumne.esOient = esOient;
            alumne.notes = notes;
            return alumne;
        }

        public static void mostraAlumne(Alumne alumne) {
            System.out.println("Alumne: " + alumne.nom);
            System.out.println("- email: " + alumne.email);
            System.out.println("- edat: " + alumne.edat);
            System.out.println("- és oïent: " + (alumne.esOient?"Sí":"No"));
            System.out.println("- notes: " + notesACsv(alumne.notes));
        }

        public static String alumneAString(Alumne alumne) {
            return String.format(
                    "Alumne(nom: \"%s\", email: \"%s\", " +
                    "edat: %d, esOient: %b, notes: {%s})", 
                    alumne.nom, alumne.email, alumne.edat, alumne.esOient, 
                    notesACsv(alumne.notes));
        }

        // converteix un array de notes a CSV
        // Té en comptes els valors NP com a -1
        public static String notesACsv(int[] notes) {
            // XXX a completar
        }

        public static String alumneACsv(Alumne alumne) {
            // XXX a completar encara que no es fa servir en aquest programa
        }

        public static Alumne csvAAlumne(String csv) {
            // XXX a completar
        }

        public static void main(String[] args) throws IOException {
            // assegura que hi ha el criteri de cerca
            // XXX a completar

            // declaracions, inicialitzacions, apertura de fitxer, ignora línia de capçaleres, etc.
            // XXX a completar

            while (true) {
                // llegeix entrada i finalitza bucle si no en queden més
                // XXX a completar

                // converteix l'entrada a Alumne
                // XXX a completar

                // comprova si el criteri de cerca es troba dins del nom o
                // el email. Si és així, mostra'l
                // XXX a completar
            }
            // consideracions finals com ara el tancament del fitxer
            // XXX a completar
        }
    }
