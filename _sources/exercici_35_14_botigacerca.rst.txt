#######################################################################
|exerciseicon__T| Exercici 35_14. Cerques de vi amb múltiples resultats
#######################################################################

.. rubric:: Context

* Carpeta de lliurament: ``35_14_botigacerca/``

* Continguts relacionats: :doc:`bib_lists`

* Com lliurar-lo: :ref:`instruccions <instruccions_git>`

* [✓] Exercici amb :ref:`autoavaluació<descripcio_exercicis_autoavaluacio>`

.. rubric:: Enunciat

A Ca l'Estrella els està anant molt bé la nostra aplicació. S'ha reduït
força el problema de trobar el vi. Com passa amb tot, però, sempre hi ha
maneres de millorar-ho i, en aquest cas, la nostra aplicació presenta una
limitació molt trista: només permet obtenir un vi per cada cerca, malgrat
que, de vegades hi poden haver més d'un vi que compleixi els requeriments
dels clients de la Sra. Estrella.

Això ho hem de solucionar. La proposta és que ``cerca()`` ara ens retorni
una llista de vins.

Aquest serà el nostre nou objectiu: afegir cerques amb múltiples
resultats.

A banda, en veure la potència de les llistes, ens toca fer un plantejament
amb la manera de guardar els vins de la classe ``Botiga``.

De moment guardem els vins a un array amb una capacitat màxima i un control
complex per culpa de que la funcionalitat d'eliminació de vins ens deixava
posicions nuŀles. I pensar que, a sobre, de moment hem deixat de
necessitar l'opció d'eliminació…

En aquesta nova versió, reemplaçarem l'array de vins a ``Botiga`` per una
llista. Això també elimina la necessitat del constructor específic
``Botiga(int)``, els mètodes ``iniciaRecorregut()`` i ``getSeguent()``.
Tampoc no llençarem l'excepció ``BotigaException`` quan la botiga està
plena. Clar, ara ja no tindrem un màxim!.

Aquestes accions de simplificació/neteja solen passar desapercebudes als
nostres usuaris però a nosaltres ens faciliten molt la feina futura. Les
hem de fer amb compte de no introduir errors, però… qui té por quan
disposem de jocs de prova?

El nostre model quedarà de la següent manera:

.. uml::
    :align: center
    :caption: Cerques amb resultats múltiples

    enum Origen
    enum Tipus
    class Botiga {
        - vins: List<Vi>
        + getVins(): List<Vi>
        + cerca(ref: String): Vi
        + cerca(plantilla: Vi): List<Vi>
        + afegeix(Vi): Vi
        + elimina(String): Vi
    }

    Botiga o-- Vi
    Entorn *-- Botiga
    Entorn --> Vi
    Vi *-- Origen
    Vi *-- Tipus


    hide class circle
    hide enum circle
    hide enum method
    skinparam classattributeiconsize 0
    skinparam class {
        backgroundcolor white
        bordercolor black
        arrowcolor black
    }

.. -*  for vim highligting issues

Un parell de consideracions addicionals:

* Quan cerquem un vi a partir d'una plantilla, a partir d'ara ``cerca(Vi)``
  ja no ens tornarà mai ``null`` encara que no es trobi cap vi.  retornarà
  una ``List<Vi>`` amb zero o més vins.

* Tot i que podríem escollir ``ArrayList`` o ``LinkedList``, tenint en
  compte que ``cerca()`` molt probablement anirà afegint vins al final de
  la llista i que aquesta serà usada per un recorregut seqüencial, potser
  la implementació més adequada seria amb ``LinkedList``.

* Totes les llistes de retorn seran immutables.
