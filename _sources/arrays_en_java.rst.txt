##################
Seqüències en Java
##################

Recordem l'enunciat del problema de la nota màxima:

    Desenvolupa un programa que vagi demanant les notes obtingudes pels
    estudiants de programació en el darrer examen (com a mínim dues) i
    indiqui quina ha estat la nota més alta.


El problema anterior presenta la dificultat de requerir guardar en algun
lloc les notes que anem rebent. És a dir, ens cal poder guardar una
seqüència de valors numèrics.

Java, com molts altres llenguatges de programació, ens ofereix diferents
maneres d'emmagatzemar seqüències de dades. La més bàsica és la coneguda
com *array*.

Per Java un *array* és un contenidor d'un nombre fix d'elements d'un
mateix tipus disposats en ordre.

A l'hora de declarar un array, Java no ens requereix saber quants elements
tindrà, però sí de quin tipus seran aquests.

.. code-block:: java

    int[] notesCurs;

Amb això, el compilador sap que ``notesCurs`` és una referència a una seqüència
de valors enters. De moment, però, no s'ha reservat espai per cap element.

Una manera simplificada de representar-ho gràficament seria:

.. image:: _images/arrays_notes_01.svg
   :align: center
   :width: 75%

La nova variable ``notesCurs`` estaria associada a una posició de memòria
(diguem ``@100``) i de moment no disposaria de valor associat.

Suposant que un curs té quatre notes (quatre avaluacions), la
inicialització es realitza de la següent manera:

.. code-block:: java

    notesCurs = new int[4];

Ara tenim un array inicialitzat. Això vol dir que hi ha espai reservat per
emmagatzemar el valor dels quatre enters.  Encara, però, no em assignat
cap valor a aquests espais. Java ens posarà el *valor base* que en el cas
dels enters és el ``0``.

Ignorant la mida de cada valor enter, ho podríem representar de la següent
manera:

.. image:: _images/arrays_notes_02.svg
   :align: center
   :width: 75%

Recordes com accedíem a una posició determinada d'un String?
``text.charAt(3)``. Java també ens permetrà accedir a posicions concretes
d'un array. Els arrays en Java s'indexen amb un valor enter, començant pel
``0``. Així, una manera d'inicialitzar les nostres notes serà:

.. code-block:: java

    notesCurs[0] = 8;
    notesCurs[1] = 9;
    notesCurs[2] = 10;
    notesCurs[3] = 7;

Sempre acceptant la simplificació de que cada element ocupa una posició de
memòria, aquestes assignacions es veurien:

.. image:: _images/arrays_notes_03.svg
   :align: center
   :width: 75%

Java ens ofereix una manera d'inicialitzar els valors més compacta. En
l'exemple:

.. code-block:: java

    int[] notesCurs = new int[] { 8, 9, 10, 7 };

Quan com en aquest cas fem l'assignació directament a la inicialització,
ens permet, fins i tot, fer-ho així:

.. code-block:: java

    int[] notesCurs = { 8, 9, 10, 7 };

Fixa't que en aquest cas, el compilador ja es preocupa de comptar quants enters necessitem.

Podrem mostrar els valors resultants, per exemple:

.. code-block:: java

    System.out.println("La nota de la primera avaluació és " + notesCurs[0]);
    System.out.println("La nota de la segona avaluació és " + notesCurs[1]);
    System.out.println("La nota de la tercera avaluació és " + notesCurs[2]);
    System.out.println("La nota de la quarta avaluació és " + notesCurs[3]);

Per suposat, els arrays permeten l'automatització d'aquest tipus de
tasques repetitives, fent servir bucles. Per exemple:

.. code-block:: java

    for(int i=0;i<notesCurs.length;++i) {
        System.out.println("La nota de l'avaluació " + i + " és " + notesCurs[i]);
    }

Fixa't que ``notesCurs.length`` ens retorna la longitud de l'array però, a
diferència del ``length()`` dels strings, aquí no porta parèntesis. Sí,
Java té aquests *cops* amagats per posar a prova la nostra memòria…

A continuació tens un petit fil d'exercicis relacionats, per posar en
pràctica aquests conceptes:

|exerciseicon__T| :doc:`exercici_32_38_enters_entre_comes_v1`

|exerciseicon__T| :doc:`exercici_32_39_enters_entre_comes_v2`

|exerciseicon__T| :doc:`exercici_32_40_enters_entre_comes_v3`

|exerciseicon__T| :doc:`exercici_32_41_enters_entre_comes_v4`

|exerciseicon__T| :doc:`exercici_32_42_arguments`

|exerciseicon__T| :doc:`exercici_32_43_nomes_enters`

|exerciseicon_ST| :doc:`exercici_32_44_split`

|exerciseicon__T| :doc:`exercici_32_45_join`
