#################################
Eliminació de variables temporals
#################################

En aquesta entrada relitza un nou pas de refacció conegut com a
*eliminació de variables temporals*.

Ja hem discutit la importància d'eliminar variables temporals. Es
tracta de variables que només es poden accedir dins del mètode que les
declara i això promou la creació de mètodes més llargs i complexos.

A ``Client.informe()`` hi ha encara variables temporals que podríem
considerar eliminar. En concret, ``total`` i ``bonificacions``. 

.. code-block:: java
    :linenos:
    :emphasize-lines: 2, 3, 8, 15, 19, 20

    public String informe() {
        double total = 0;
        int bonificacions = 0;
        String resultat = "Informe de lloguers del client " + 
            getNom() + 
            " (" + getNif() + ")\n";
        for (Lloguer lloguer: lloguers) {
            bonificacions += bonificacionsDeLloguer(lloguer);
            // composa els resultats d'aquest lloguer
            resultat += "\t" +
                lloguer.getVehicle().getMarca() +
                " " +
                lloguer.getVehicle().getModel() + ": " +
                ( /* ??? */ * 30) + "€" + "\n";
            total += /* ??? */ * 30;
        }

        // afegeix informació final
        resultat += "Import a pagar: " + total + "€\n" +
            "Punts guanyats: " + bonificacions + "\n";
        return resultat;
    }


Fixa't que el càlcul d'aquests dos valors, serà necessari també per
realitzar ``Client.informeHTML()``

Totes dues variables temporals acumulen valors obtinguts dels
diferents lloguers. Fixa't com, el bucle es aprofitat per realitzar
tres coses diferents:

#. Composar la part de l'informe corresponent a cada lloguer.

#. Acumular l'import de cada lloguer.

#. Acumular la bonificació de cada lloguer.

Si bé pot semblar convenient des d'un punt de vista de rendiment,
realitzar aquestes tres coses barrejades en el mateix lloc ens està
obligant a duplicar codi a ``Client.informeHTML()``. 

El que farem a continuació és realitzar les tres accions en
recorreguts separats. Sí, recorrerem tres cops els lloguers d'un
client. En el cas del càlcul d'imports i bonificacions, aquests
recorreguts tindran lloc en nous mètodes.

Fixa't que amb aquest canvi, la funcionalitat de calcular l'import total i les
bonificacions d'un client estan disponibles per a qualsevol nou mètode de
``Client`` que les necessiti. Encara més, si féssim públics els nous mètodes,
els usuaris de la classe també en podrien traure profit.  Planteja't com s'ho
farien abans per a poder calcular aquests valors?  Era quelcom convenient?
Perquè?

|exerciseicon__T| :doc:`exercici_52_23_elimina_total`

|exerciseicon__T| :doc:`exercici_52_24_elimina_bonificacions`

|exerciseicon___| :doc:`exercici_52_25_documentacio`


Nota sobre el rendiment
=======================

Si continua preocupant-te el rendiment, et proposo que facis una prova de temps
abans i després del canvi (posa un nombre considerable de lloguers) Compara la
diferència amb el que et costava abans codificar ``Client.informeHTML()``
respecte d'ara (inclou una estimació del cost de manteniment i d'afegir noves
versions com ``Client.informeXML()``)

Si realment et preocupa el rendiment, faries bé de revisar la conveniència de
fer servir la concatenació de Strings abans que aquests breus recorreguts
duplicats. Fes una ullada a `aquesta classe
<https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/StringBuilder.html>`_
si et cal una pista.
