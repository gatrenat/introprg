#########################################################
|exerciseicon__T| Exercici 32_52. Taula d'enters a String
#########################################################

.. rubric:: Context

* Carpeta de lliurament: ``32_52_int2str/``

* Continguts relacionats: :doc:`arrays_mutabilitat`

* Com lliurar-lo: :ref:`instruccions <instruccions_git>`

* [✓] Exercici amb :ref:`autoavaluació<descripcio_exercicis_autoavaluacio>`

.. rubric:: Enunciat

En aquest exercici, completaràs un programa que permet mostrar taules de
diferents dimensions, amb totes les posicions inicialitzades amb un 1.

Les dimensions vindran especificades en forma d'arguments de la línia de
comandes. Una especificació de dimensió estarà formada per dos números,
entre el 1 i el 99, separats pel caràcter ``x``.  Com a exemples vàlids
d'especificacions de dimensions tindríem ``"2x4"``, ``"3x42"`` i ``"99x1"``
Qualsevol altra presentació d'una especificació es considerarà errònia.

La plantilla del programa és la següent:

.. code-block:: java
    :linenos:

    /*…*/
    public class TaulaEnterAString {
        public static void main(String[] args){
            for (int i=0; i<args.length; i++) {
                System.out.println(args[i]);
                int files = obteFiles(args[i]);
                int columnes = obteColumnes(args[i]);
                if (files < 1 || columnes < 1) {
                    System.out.println("Especificació no vàlida");
                } else {
                    int[][] taula  = new int[files][columnes];
                    UtilTaula.inicialitzaTaula(taula, 1);
                    String resultat = UtilTaula.taulaToString(taula);
                    System.out.println(resultat);
                    System.out.println();
                }
            }
        }

        public static boolean especificacioCorrecta(String especificacio) {
            /* retorna true si l'especificació és de la forma n'x'm on n i m
             * són dos strings d'un o dos dígits.  Exemple: "12x5" seria
             * correcta, mentre que "x3454" no.  */
            String[] coordenades = especificacio.split("x");
            if (coordenades.length != 2) return false;
            for (int i=0; i<coordenades.length; i++) {
                if (! UtilString.esEnter(coordenades[i])) return false;
                int valor = Integer.parseInt(coordenades[i]);
                if (valor < 0 || valor > 99) return false;
            }
            return true;
        }

        public static int obteFiles(String especificacio) {
            /* Aquesta funció espera l'especificació de la forma d'una taula.
             * En cas que l'especificació sigui correcta, retornarà l'enter
             * corresponent als primers dígits. Per exemple, si especificacio
             * és "12x5", retornarà 12.
             * Altrament, retornarà el valor -1.  */
            /*…*/
        }

        public static int obteColumnes(String especificacio) {
            /* Aquesta funció espera l'especificació de la forma d'una taula.
             * En cas que l'especificació sigui correcta, retornarà l'enter
             * corresponent als segons dígits. Per exemple, si especificacio
             * és "12x5", retornarà 5.
             * Altrament, retornarà el valor -1.  */
            /*…*/
        }
    }

.. note:: Fixa't que la plantilla anterior t'ofereix el codi sencer de la
    funció ``especificacioCorrecta()`` que et permetrà saber si una
    especificació és correcta o no. Aquesta funció incorpora un element
    que encara no hem vist a classe (``split()``) Es tracta d'una utilitat
    dels Strings de Java que ens retorna un array amb els elements que
    apareguin al text separats entre el símbol indicat. No cal que
    entenguis aquest codi ara, ja que el treballarem més endavant del
    curs.

    Si consultes la `documentació oficial
    <https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html#split(java.lang.String)>`_
    trobaràs que hi ha dues versions; una que espera només un String i una
    altra que, a banda del String té un paràmetre enter. Una funció
    interessant a guardar al calaix d'eines.

Considera les següents simulacions:

.. code-block:: console
    :emphasize-lines: 2-

    $ java TaulaEnterAString 3x4

    3x4
              1         1         1         1
              1         1         1         1
              1         1         1         1

.. code-block:: console
    :emphasize-lines: 2-

    $ java TaulaEnterAString 123x4 2x2

    123x4
    Especificació no vàlida

    2x2
              1         1
              1         1


Per passar totes les proves, caldrà implementar els mòduls:

* ``int obteFiles(String)``: descripció a la plantilla

* ``int obteColumnes(String)``: descripció a la plantilla

* ``String UtilTaula.taulaToString(int[][])``

  Funció pura que composa un String a partir del contingut d'una taula d'enters.
  Els valors apareixeran separats amb un espai i representa els
  números com a mínim amb vuit posicions.  (**pista**: String.format() i "%8d")

  Per exemple, imprimir el resultat de ``taulaToString()`` sobre una taula de
  3x4 que hagués estat inicialitzada amb valors seqüèncials, tindria el següent
  aspecte:

  .. code-block:: none

              1         2         3         4
              5         6         7         8
              9        10        11        12

  Fixa't que la primera dimensió de la taula es representa com a línies i la
  segona com a columnes.

* ``UtilTaula.inicialitzaTaula(int[][] taula, int valor)``

  Procediment que modifica la taula que rep, tot assignant el mateix valor
  a totes les posicions.

.. note:: El programa no s'ha de preocupar de si la finestra del terminal
          on sigui executat, pot mostrar totes les dades requerides.
