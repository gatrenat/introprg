##########################################################
|exerciseicon__T| Exercici 34_18. En Renat és assessinable
##########################################################

.. rubric:: Context

* Carpeta de lliurament: ``34_18_assessinable/``

* Continguts relacionats: :doc:`poo_intro_accions`

* Com lliurar-lo: :ref:`instruccions <instruccions_git>`

* [✓] Exercici amb :ref:`autoavaluació<descripcio_exercicis_autoavaluacio>`

.. rubric:: Enunciat

Si et passa com a mi, a hores d'ara t'hauràs encarinyant amb el gat Renat. Però
no a tothom li passa. De fet, hi ha qui podria voler que nostre estimat amic
l'espitxi. Per exemple, imagina't que algú el fa servir com a personatge d'un
joc en el que pugui anar perdent vides.

Ara per ara, la implementació que tenim (considera la :doc:`darrera
<exercici_34_17_ensinistrat>`) ens obliga a fer el següent per treure-li
una vida a una instància de ``GatRenat``:

.. code-block:: java

    renat.setVides(renat.getVides() - 1);

No seria molt més fàcil de llegir el següent?

.. code-block:: java

    renat.mor();
    
Doncs per aquí va el tema que et toca implementar en aquest exercici.

.. uml::
    :align: center

     @startuml
     hide circle
     skinparam monochrome true
     skinparam classAttributeIconSize 0


     class GatRenat {
         + mor(): String
         + reviu(): String
         + reviu(int): String
     }
     @enduml



Afegeix al gat Renat els següents mètodes:

* ``String mor()``: li treu una vida si encara és viu i retorna el
  lamentable lament ``"auch"`` quan, un cop perduda una vida, encara és
  viu. En canvi, si en treure-li la vida ja no li queden més, retorna el
  més definitiu ``"ximpún"``. Finalment, si ja estava mort del tot,
  retornarà un silenci en forma de punts suspensius ``"..."``.

* ``String reviu()``: quan en Renat està mort, li afegeix una vida i
  retorna un crit d'alegria ``"guai!"``. Si no estava mort, però, retorna
  el típic silenci de punts suspensius ``"..."``.

* ``String reviu(int)``: fa el mateix que ``reviu()`` però en
  aquesta ocasió se li pot indicar el nombre de vides amb les que torna a
  la vida. Si el nombre de vides indicat és menor que un, retornarà el
  silenci típic.

Prova les noves funcionalitats amb la següent versió de ``UsaGatRenat``:

.. code-block:: java

    /*
     * Mata el gat Renat 3 cops
     * - el primers amb totes les vides
     * - el segon amb una sola vida
     * - el tercer amb dos vides
     * Després de matar-lo "del tot" prova un altre cop… per si de cas
     * Finalment el gat Renat acaba tenint tres vides però no les 
     * pot aprofitar gaire pequè el programa s'acaba.
     */
    public class UsaGatRenat {
        public static void main(String[] args) {
            GatRenat renat = new GatRenat();
            for (int vides = 1; vides <= 3; vides++) {
                while (renat.esViu()) {
                    System.out.println("Renat diu: " + renat.mor());
                }
                System.out.println("Renat diu: " + renat.mor());    // per rematar-ho!
                System.out.println("Renat diu: " + renat.reviu(vides));
            }
        }
    }

Això generarà la següent sortida:

.. code-block:: console
    :emphasize-lines: 2-

    $ java UsaGatRenat 
    Renat diu: auch
    Renat diu: auch
    Renat diu: auch
    Renat diu: auch
    Renat diu: auch
    Renat diu: auch
    Renat diu: ximpún
    Renat diu: ...
    Renat diu: guai!
    Renat diu: ximpún
    Renat diu: ...
    Renat diu: guai!
    Renat diu: auch
    Renat diu: ximpún
    Renat diu: ...
    Renat diu: guai!

Una mica de *culturilla* POO
============================

Java ens ofereix la possibilitat de definir mètodes amb el mateix nom,
sempre i quant els paràmetres siguin diferents. A aquest fenomen se li sol
conèixer com *sobrecàrrega* (*overload*).

Així, el nom ``reviu()`` estaria sobrecarregat a ``GatRenat``.

.. important:: Cap gat ha rebut dany durant l'elaboració d'aquest exercici.
   Ara, si en executar la teva resposta, algun gat pateix, a la teva
   consciència va.
